{"ast":null,"code":"var _jsxFileName = \"/Users/seyedmmojtabaabutalebi/Desktop/React-works/react-complete-guide/src/components/Expenses/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Expenses.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport Card from \"../UI/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  }; // function for select year to filter expenses\n\n\n  const filteredExpenses = props.item.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expenses\",\n    children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n      selected: filteredYear,\n      onChangeFilter: filterChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), expensesContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n\n_c = Expenses;\nexport default Expenses; // inside of JSX we can use :\n// {/* show expenses based on filteryear */}\n//       {/* && is use in condition if the part before && be true the second part after && will be render */}\n//       {filteredExpenses.length === 0 && <p>No Expenses found!</p>}\n//       {filteredExpenses.length > 0 &&\n//         // use array and map function to create dynamic ExpenseItem\n//         // before filter year: props.item.map(){}\n//         // after fiter year:\n//         filteredExpenses.map((expense) => (\n//           <ExpenseItem\n//             // we should add such a key when mapping out list of item to render efficiently\n//             key={expense.id}\n//             title={expense.title}\n//             amount={expense.amount}\n//             date={expense.date}\n//           />\n//         ))}\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/Users/seyedmmojtabaabutalebi/Desktop/React-works/react-complete-guide/src/components/Expenses/Expenses.js"],"names":["React","useState","ExpenseItem","ExpensesFilter","Card","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filteredExpenses","item","filter","expense","date","getFullYear","toString","expensesContent"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,YAAjB;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;AACA,QAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;AAC5CF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACD,GAFD,CAF0B,CAK1B;;;AACA,QAAMC,gBAAgB,GAAGL,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAmBC,OAAD,IAAa;AACtD,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD;AACD,GAFwB,CAAzB;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,QAAQ,EAAEA,YADZ;AAEE,MAAA,cAAc,EAAEE;AAFlB;AAAA;AAAA;AAAA;AAAA,YADF,EAKGS,eALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAzBD;;GAAMb,Q;;KAAAA,Q;AA0BN,eAAeA,QAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Expenses.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport Card from \"../UI/Card\";\nconst Expenses = (props) => {\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n  const filterChangeHandler = (selectedYear) => {\n    setFilteredYear(selectedYear);\n  };\n  // function for select year to filter expenses\n  const filteredExpenses = props.item.filter((expense) => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n\n  return (\n    <Card className=\"expenses\">\n      <ExpensesFilter\n        selected={filteredYear}\n        onChangeFilter={filterChangeHandler}\n      />\n      {expensesContent}\n\n      {/* <ExpenseItem\n        title={props.item[0].title}\n        amount={props.item[0].amount}\n        date={props.item[0].date}\n      /> */}\n    </Card>\n  );\n};\nexport default Expenses;\n\n// inside of JSX we can use :\n\n// {/* show expenses based on filteryear */}\n//       {/* && is use in condition if the part before && be true the second part after && will be render */}\n//       {filteredExpenses.length === 0 && <p>No Expenses found!</p>}\n//       {filteredExpenses.length > 0 &&\n//         // use array and map function to create dynamic ExpenseItem\n//         // before filter year: props.item.map(){}\n\n//         // after fiter year:\n//         filteredExpenses.map((expense) => (\n//           <ExpenseItem\n//             // we should add such a key when mapping out list of item to render efficiently\n//             key={expense.id}\n//             title={expense.title}\n//             amount={expense.amount}\n//             date={expense.date}\n//           />\n//         ))}\n"]},"metadata":{},"sourceType":"module"}